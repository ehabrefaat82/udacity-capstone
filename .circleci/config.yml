version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.0
  github-super-linter: circleci/github-super-linter@1.0

jobs:
  build-code:
    docker:
      - image: cimg/openjdk:8.0.345
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: "build"
          command: |
            echo ">---------- build ----------<"
            mvn -B -DskipTests clean package
      - store_artifacts:
          path: udacity-capstone-0.0.1-SNAPSHOT.jar
  test-code:
    docker:
      - image: cimg/openjdk:8.0.345
    steps:
      - checkout
      - run:
          name: "test"
          command: |
            echo ">---------- test ----------<"
            mvn test
  scan-code:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "scan"
          command: |
            echo ">---------- TODO scan ----------<"
      - github-super-linter/lint
  package-build:
    docker:
      - image: cimg/openjdk:8.0.345
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: "package"
          command: |
            echo ">---------- package ----------<"
            set -ex
            TAG="0.1.${CIRCLE_BUILD_NUM}"
            echo $TAG
            sudo apt -y install jq
            mkdir target
            curl 'https://circleci.com/api/v1.1/project/github/ehabrefaat82/udacity-capstone/200/artifacts' | jq '.[0]["url"]' | xargs curl -o target/udacity-capstone-0.0.1-SNAPSHOT.jar
            ls
            cat Dockerfile
            docker build --build-arg build_number="${CIRCLE_BUILD_NUM}" --tag=${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:$TAG .
            docker run -p 8070:8070 --name somename -d ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:$TAG
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASS}
            docker push ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:$TAG
  create-eks:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "  create-eks"
          command: |
            echo ">---------- create-eks ----------<"
            echo "EKS should be create on time, to use cloud formation creating the cluster"
            echo ".../project/.crcleci/eks>  ./create-stack.sh capstoneEKS eks-config.yaml"
  publish:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - run:
          name: "publish"
          command: |
            echo ">---------- publish ----------<"
      - checkout
      - kubernetes/install-kubectl:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: EKS
      - run:
          name: test
          command: |
            kubectl get services
            ls
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yaml
          resource-name: deployment/capstone
          show-kubectl-command: true

workflows:
  default-workflow:
    jobs:
#      - publish
      - build-code
      - test-code:
          requires:
            - build-code
      - scan-code:
          requires:
            - test-code
      - package-build:
          requires:
            - scan-code
      - create-eks:
          requires:
            - scan-code
      - publish:
          requires:
            - package-build
            - create-eks