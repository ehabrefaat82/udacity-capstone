AWSTemplateFormatVersion: "2010-09-09"
Description: Udacity capstone EKS
Parameters:
  ProjectName:
    Type: String
    Default: capstoneEKS

Resources:
  # ############
  # Network
  # ############
  # 1. VPC
  eksVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-VPC
  # 2. Subnets
  eksPublicSubNet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref eksVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicSubNet01
  eksPublicSubNet02:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref eksVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicSubNet02
  # 3. Internet Gateway
  eksInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-IGW
  eksInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref eksInternetGateway
      VpcId: !Ref eksVPC
  # 4. Route Table
  eksPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref eksVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-Public-Route-Table
  # 5. Route Roles
  eksPublicRoutInternet:
    Type: AWS::EC2::Route
    DependsOn: eksInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref   eksPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref eksInternetGateway
  # 6. Route Association
  PublicSubNetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref eksPublicRouteTable
      SubnetId: !Ref eksPublicSubNet01
  PublicSubNetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref eksPublicRouteTable
      SubnetId: !Ref eksPublicSubNet02
  # ----------------------------------------
  # ##############
  # IAM
  # ###############
  eksControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: eksControlPlaneRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  eksWorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: eksWorkerNodesRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  # ----------------------------------------
  # ##############
  # Security Group
  # ###############
  eksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster SG
      VpcId: !Ref eksVPC
      Tags:
        - Key: Name
          Value: eks-SecurityGroup
        - Key: Project
          Value: aws-eks

  # ##############
  # control Panel
  # ###############
  eksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: EKS
      Version: 1.22
      RoleArn:
        "Fn::GetAtt": [ "eksControlPlaneRole", "Arn" ]
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref eksSecurityGroup
        SubnetIds:
          - !Ref eksPublicSubNet01
          - !Ref eksPublicSubNet02
    DependsOn: [ eksControlPlaneRole, eksPublicSubNet01, eksPublicSubNet02, eksSecurityGroup ]
  # ##############
  # Worker Group
  # ###############
  eksNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: EKS
      NodeRole:
        "Fn::GetAtt": [ "eksWorkerNodesRole", "Arn" ]
      AmiType: AL2_x86_64
      InstanceTypes:
        - t3.medium
      NodegroupName: NodeGroup01
      RemoteAccess:
        Ec2SshKey: udacity-main-key
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 7
      Labels:
        Project: aws-eks
      Subnets:
        - !Ref eksPublicSubNet01
        - !Ref eksPublicSubNet02
    DependsOn: [ eksCluster, eksWorkerNodesRole ]

